function UpvalueScanner()
	
	
	-- upvalue scanner tab gui creation
	
	UpvalueScannerTab.Name = "UpvalueScannerTab"
UpvalueScannerTab.Parent = TabsHolder
UpvalueScannerTab.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
UpvalueScannerTab.BackgroundTransparency = 1.000
UpvalueScannerTab.Position = UDim2.new(-0.000671371818, 0, -0.00273423642, 0)
UpvalueScannerTab.Size = UDim2.new(0, 420, 0, 319)
UpvalueScannerTab.Visible = false
UpvalueScannerTab.Image = "rbxassetid://2851926732"
UpvalueScannerTab.ImageColor3 = Color3.fromRGB(47, 47, 47)
UpvalueScannerTab.ScaleType = Enum.ScaleType.Slice
UpvalueScannerTab.SliceCenter = Rect.new(10, 10, 10, 10)

UpvalueText.Name = "UpvalueText"
UpvalueText.Parent = UpvalueScannerTab
UpvalueText.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
UpvalueText.BorderColor3 = Color3.fromRGB(0, 0, 0)
UpvalueText.Position = UDim2.new(0.0380952395, 0, 0.0282131657, 0)
UpvalueText.Size = UDim2.new(0, 390, 0, 27)
UpvalueText.Font = Enum.Font.SourceSans
UpvalueText.PlaceholderColor3 = Color3.fromRGB(178, 178, 178)
UpvalueText.PlaceholderText = "Type to filter out upvalues..."
UpvalueText.Text = ""
UpvalueText.TextColor3 = Color3.fromRGB(255, 255, 255)
UpvalueText.TextSize = 16.000

FilterHolder.Name = "FilterHolder"
FilterHolder.Parent = UpvalueScannerTab
FilterHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
FilterHolder.BackgroundTransparency = 1.000
FilterHolder.Position = UDim2.new(0.0380952395, 0, 0.125391856, 0)
FilterHolder.Size = UDim2.new(0, 390, 0, 27)

UIListLayout_11.Parent = FilterHolder
UIListLayout_11.FillDirection = Enum.FillDirection.Horizontal
UIListLayout_11.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout_11.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout_11.VerticalAlignment = Enum.VerticalAlignment.Center
	
	SearchHalf.Name = "SearchHalf"
SearchHalf.Parent = FilterHolder
SearchHalf.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SearchHalf.BackgroundTransparency = 1.000
SearchHalf.Position = UDim2.new(0.423076928, 0, -0.055555556, 0)
SearchHalf.Size = UDim2.new(0, 60, 0, 26)

SearchHalfBtn.Name = "SearchHalfBtn"
SearchHalfBtn.Parent = SearchHalf
SearchHalfBtn.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
SearchHalfBtn.BorderSizePixel = 0
SearchHalfBtn.Size = UDim2.new(0, 24, 0, 20)
SearchHalfBtn.Font = Enum.Font.SourceSans
	--SearchHalfBtn.Text = "✓"
	SearchHalfBtn.Text = ""
SearchHalfBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
SearchHalfBtn.TextScaled = true
SearchHalfBtn.TextSize = 14.000
SearchHalfBtn.TextWrapped = true

ImageLabel_2.Parent = SearchHalf
ImageLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ImageLabel_2.BackgroundTransparency = 1.000
ImageLabel_2.Position = UDim2.new(0.516666651, 0, 0, 0)
ImageLabel_2.Size = UDim2.new(0, 23, 0, 23)
ImageLabel_2.Image = "rbxassetid://4338879986"

SearchByPath.Name = "SearchByPath"
SearchByPath.Parent = FilterHolder
SearchByPath.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SearchByPath.BackgroundTransparency = 1.000
SearchByPath.Position = UDim2.new(0.423076928, 0, -0.055555556, 0)
SearchByPath.Size = UDim2.new(0, 60, 0, 26)

SearchPathBtn.Name = "SearchPathBtn"
SearchPathBtn.Parent = SearchByPath
SearchPathBtn.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
SearchPathBtn.BorderSizePixel = 0
SearchPathBtn.Size = UDim2.new(0, 24, 0, 20)
SearchPathBtn.Font = Enum.Font.SourceSans
--SearchPathBtn.Text = "✓"
SearchPathBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
SearchPathBtn.TextScaled = true
SearchPathBtn.TextSize = 14.000
	SearchPathBtn.TextWrapped = true
	SearchPathBtn.Text = ""

ImageLabel_3.Parent = SearchByPath
ImageLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ImageLabel_3.BackgroundTransparency = 1.000
ImageLabel_3.Position = UDim2.new(0.516666651, 0, 0, 0)
ImageLabel_3.Size = UDim2.new(0, 23, 0, 23)
ImageLabel_3.Image = "rbxassetid://4229796123"

Text_6.Name = "Text"
Text_6.Parent = UpvalueScannerTab
Text_6.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Text_6.BackgroundTransparency = 1.000
Text_6.Position = UDim2.new(0.0380952433, 0, 0.222570539, 0)
Text_6.Size = UDim2.new(0, 106, 0, 16)
Text_6.Font = Enum.Font.SourceSans
Text_6.Text = "Function Name"
Text_6.TextColor3 = Color3.fromRGB(255, 255, 255)
Text_6.TextSize = 18.000

ResultsHolder.Name = "ResultsHolder"
ResultsHolder.Parent = UpvalueScannerTab
ResultsHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ResultsHolder.BackgroundTransparency = 1.000
ResultsHolder.Position = UDim2.new(0.0380952395, 0, 0.31279543, 0)
ResultsHolder.Size = UDim2.new(0, 390, 0, 211)
ResultsHolder.Image = "rbxassetid://2851926732"
ResultsHolder.ImageColor3 = Color3.fromRGB(29, 29, 29)
ResultsHolder.ScaleType = Enum.ScaleType.Slice
ResultsHolder.SliceCenter = Rect.new(12, 12, 12, 12)

Results.Name = "Results"
Results.Parent = ResultsHolder
Results.Active = true
Results.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Results.BackgroundTransparency = 1.000
Results.BorderSizePixel = 0
Results.Position = UDim2.new(0.0230769236, 0, 0.0620402098, 0)
Results.Size = UDim2.new(0, 381, 0, 194)
	Results.ScrollBarThickness = 5
	Results.CanvasSize = UDim2.new(0,0,0,0)
	
	-- booleans to determind what kind of searching
	
	local SearchHalf = false -- to search by text
	local SearchPath = false -- get upvalues by scrit path
	
	SearchHalfBtn.MouseButton1Click:connect(function()
		if SearchHalf == false then
			SearchHalf = true
			SearchHalfBtn.Text = "✓"
			SearchPath = false
			SearchPathBtn.Text = ""
			MessageBoxInitUI("Deep search may freeze you temporary")
		elseif SearchHalf == true then
			SearchHalf = false
			SearchHalfBtn.Text = ""
		end
	end)
	
	
	
		SearchPathBtn.MouseButton1Click:connect(function()
		if SearchPath == false then
			SearchPath = true
			SearchPathBtn.Text = "✓"
			SearchHalf = false
			SearchHalfBtn.Text = ""
			MessageBoxInitUI("Script upvalue finder enabled")
		elseif SearchPath == true then
			SearchHalf = false
			SearchPathBtn.Text = ""
		end
	end)
	
	
	
	--[[
	function SetUpvalue(Name, Line, NewValue)
    if Name and Line and NewValue then
        if type(Name) ~= 'string' then
            return
        end
    end

    local NewLine = tonumber(Line)

    for i, v in pairs(getgc()) do
        if getfenv(v).script ~= nil and typeof(getfenv(v).script) == 'Instance' then
            local InfoName = debug.getinfo(v).name
            if InfoName:lower():find(Name) then
                setupvalue(v, NewLine, NewValue)
            end
        end
    end
end
	
	]]
	
	
	-- function to output the upvalues in results
	
	
	function UpvalueOutput(index, name, msg)
		
		-- gui instances
		
		local UpvalueInfoMain = Instance.new("ImageLabel")
local Icon = Instance.new("ImageLabel")
local UpvalueName = Instance.new("TextLabel")
local UpvaluesMain = Instance.new("Frame")
local Icon_2 = Instance.new("ImageLabel")
local UpvalueName_2 = Instance.new("TextLabel")
		local UpvlauesOptionsBtn = Instance.new("TextButton")
		local UpvalueIndex = Instance.new("TextLabel")
		
		
		
		
		
		
		
		-- gui creation
		
		
		UpvalueInfoMain.Name = "UpvalueInfoMain"
UpvalueInfoMain.Parent = Results
UpvalueInfoMain.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
UpvalueInfoMain.BackgroundTransparency = 1.000
UpvalueInfoMain.Size = UDim2.new(0.950131238, 0, 0, 60)
UpvalueInfoMain.Image = "rbxassetid://2851926732"
UpvalueInfoMain.ImageColor3 = Color3.fromRGB(48, 48, 48)
UpvalueInfoMain.ScaleType = Enum.ScaleType.Slice
UpvalueInfoMain.SliceCenter = Rect.new(12, 12, 12, 12)

Icon.Name = "Icon"
Icon.Parent = UpvalueInfoMain
Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Icon.BackgroundTransparency = 1.000
Icon.Size = UDim2.new(0, 27, 0, 24)
Icon.Image = "rbxassetid://4666593447"

UpvalueName.Name = "UpvalueName"
UpvalueName.Parent = UpvalueInfoMain
UpvalueName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
UpvalueName.BackgroundTransparency = 1.000
UpvalueName.Position = UDim2.new(0.0911602229, 0, 0.0333333351, 0)
UpvalueName.Size = UDim2.new(0, 296, 0, 20)
UpvalueName.Font = Enum.Font.SourceSans
UpvalueName.TextColor3 = Color3.fromRGB(255, 255, 255)
UpvalueName.TextSize = 16.000
UpvalueName.TextWrapped = true
		UpvalueName.TextXAlignment = Enum.TextXAlignment.Left
		game:GetService("RunService").RenderStepped:connect(function()
		UpvalueName.Text = tostring(name) -- setting the name of the upvalure
		end)

UpvaluesMain.Name = "UpvaluesMain"
UpvaluesMain.Parent = UpvalueInfoMain
UpvaluesMain.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
UpvaluesMain.BorderSizePixel = 0
UpvaluesMain.Position = UDim2.new(0.0220994465, 0, 0.466666669, 0)
		UpvaluesMain.Size = UDim2.new(0, 345, 0, 30)
		
Icon_2.Name = "Icon"
Icon_2.Parent = UpvaluesMain
Icon_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Icon_2.BackgroundTransparency = 1.000
Icon_2.Position = UDim2.new(0.055072464, 0, 0.13333334, 0)
Icon_2.Size = UDim2.new(0, 25, 0, 23)
Icon_2.Image = "rbxassetid://4666594723"

UpvalueName_2.Name = "UpvalueName"
UpvalueName_2.Parent = UpvaluesMain
UpvalueName_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
UpvalueName_2.BackgroundTransparency = 1.000
UpvalueName_2.Position = UDim2.new(0.144927531, 0, 0.166666672, 0)
UpvalueName_2.Size = UDim2.new(0, 276, 0, 20)
		UpvalueName_2.Font = Enum.Font.SourceSans
		game:GetService("RunService").RenderStepped:connect(function()
			UpvalueName_2.Text = tostring(msg) -- setting the name of the value
			end)
UpvalueName_2.TextColor3 = Color3.fromRGB(255, 255, 255)
UpvalueName_2.TextSize = 16.000
UpvalueName_2.TextWrapped = true
		UpvalueName_2.TextXAlignment = Enum.TextXAlignment.Left
		
		UpvalueIndex.Name = "UpvalueIndex"
UpvalueIndex.Parent = UpvaluesMain
UpvalueIndex.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
UpvalueIndex.BackgroundTransparency = 1.000
UpvalueIndex.Position = UDim2.new(0.0186963957, 0, 0.166666672, 0)
UpvalueIndex.Size = UDim2.new(0, 12, 0, 20)
UpvalueIndex.Font = Enum.Font.SourceSans
UpvalueIndex.Text = tonumber(index) -- setting the name of the index
UpvalueIndex.TextColor3 = Color3.fromRGB(255, 17, 60)
UpvalueIndex.TextScaled = true
UpvalueIndex.TextSize = 16.000
UpvalueIndex.TextWrapped = true
UpvalueIndex.TextXAlignment = Enum.TextXAlignment.Left


UpvlauesOptionsBtn.Name = "UpvlauesOptionsBtn"
UpvlauesOptionsBtn.Parent = UpvalueInfoMain
UpvlauesOptionsBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
UpvlauesOptionsBtn.BackgroundTransparency = 1.000
UpvlauesOptionsBtn.Position = UDim2.new(0.0220994484, 0, 0.366666675, 0)
UpvlauesOptionsBtn.Size = UDim2.new(0, 354, 0, 38)
UpvlauesOptionsBtn.Font = Enum.Font.SourceSans
UpvlauesOptionsBtn.Text = ""
UpvlauesOptionsBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
		UpvlauesOptionsBtn.TextSize = 14.000
		Results.CanvasSize = Results.CanvasSize + UDim2.new(0,0,0.5,0)
		
		
		
		
		
		-- function to show the options when right clicking
		 
		
		UpvlauesOptionsBtn.MouseButton2Click:connect(function()
			
			   if ChangeModuleValueTab.Visible == true then -- closing the gui when already open to avoid bug
					ChangeModuleValueTab.Visible = false
					wait(0.1)
					
			
					
				end
			 
			
			
			
			
			lol = UpvalueName_2.Text
				int = tonumber(index)
			
          TextBox.Text = UpvalueName_2.Text
			          ElementValueText.Text = UpvalueName.Text
			
			
			print(TextBox.Text)
			print(ElementValueText.Text)
			print(int)
			
			MaeScriptBtn.MouseButton1Click:connect(function()
				if tostring(UpvalueName_2.Text) then
					setclipboard("-- This script was generated with clvocre\nlocal findupval = function(name)\nfor i,v in pairs(getgc()) do\nif type(v) == \"function\" and not is_synapse_function(v) then\n if debug.getinfo(v).name == name then\nreturn v\nend\nend\nend\nend\n\nlocal index = " .. tonumber(int) .. "\nlocal newval = \"" .. UpvalueName_2.Text .. "\" -- replace this with the new value you want to change it to lol\ndebug.setupvalue(findupval(\"" .. UpvalueName.Text .. "\") , index, newval)")
				end
				if tonumber(UpvalueName_2.Text) then
				setclipboard("-- This script was generated with clvocre\nlocal findupval = function(name)\nfor i,v in pairs(getgc()) do\nif type(v) == \"function\" and not is_synapse_function(v) then\n if debug.getinfo(v).name == name then\nreturn v\nend\nend\nend\nend\n\nlocal index = " .. tonumber(int) .. "\nlocal newval = " .. UpvalueName_2.Text .. " -- replace this with the new value you want to change it to lol\ndebug.setupvalue(findupval(\"" .. UpvalueName.Text .. "\") , index, newval)")
					end
					ChangeModuleValueTab.Visible = false
			end)
			

			ChangeValueBtn.MouseButton1Click:connect(function()
			
				oldvalue = lol
				changeval = false
			
				          if ChangeModuleValueTab.Visible == true then
					ChangeModuleValueTab.Visible = false
					wait(0.1)
					ChangeModuleValueTab.Visible = true
				else
					ChangeModuleValueTab.Visible = true
				end
			 

          if tonumber(TextBox.Text) then
            ElementText.Text = "number"
          elseif TextBox.Text == "false" or TextBox.Text == "true" then
            ElementText.Text = "boolean"
          else
            ElementText.Text = "string"
          end

          end)

          local numberDropDown = false
          local stringDropDown = false
          local booleanDropDown  = false

          if ElementText.Text == "number" then

            numberDropDown = true
            booleanDropDown = false
            stringDropDown = false
          elseif ElementText.Text == "boolean" then

            numberDropDown = false
            stringDropDown = false
            booleanDropDown = true
          else

            stringDropDown = true
            numberDropDown = false
            booleanDropDown  = false
          end

          DropDownBtn.MouseButton1Click:connect(function()
          DropDownOptions.Visible = true
          end)



          NumberElementBtn.MouseButton1Click:connect(function()
          numberDropDown = true
          booleanDropDown = false
          stringDropDown = false
          ElementText.Text = "number"
          DropDownOptions.Visible = false
          end)

          StringElementBtn.MouseButton1Click:connect(function()
          numberDropDown = false
          booleanDropDown = false
          stringDropDown = true
          ElementText.Text = "string"
          DropDownOptions.Visible = false
          end)

          BooleanElementBtn.MouseButton1Click:connect(function()
          numberDropDown = false
          booleanDropDown = true
          stringDropDown = false
          ElementText.Text = "boolean"
							          DropDownOptions.Visible = false
							
						end)
						
						
					
						

         TextBox.FocusLost:connect(function(enter) -- editing part
							if enter then
								
								
								if ElementText.Text == "number" == true then
									
									if tonumber(TextBox.Text) then
												local val = TextBox.Text
												
							
						
						
						
			

local oh_get_gc = getgc or false
local oh_is_x_closure = is_synapse_function or issentinelclosure or is_protosmasher_closure or is_sirhurt_closure or checkclosure or false
local oh_get_info = debug.getinfo or getinfo or false
local oh_set_upvalue = debug.setupvalue or setupvalue or setupval or false

if not oh_get_gc and not oh_is_x_closure and not oh_get_info and not oh_set_upvalue then
    warn("Your exploit does not support this script")
    return
end

local oh_find_function = function(name)
    for i,v in pairs(oh_get_gc()) do
        if type(v) == "function" and not oh_is_x_closure(v) then
            if oh_get_info(v).name == name then
                return v
            end
        end
    end
end

local upvalname = oh_find_function(ElementValueText.Text)
local oh_index = tonumber(int)  -- replace this with the index of the upvalue
local oh_new_value = tonumber(TextBox.Text) -- replace this with the value that you want to set the upvalue to

							oh_set_upvalue(upvalname, oh_index, oh_new_value)
						
							
							for i,v in pairs(Results:GetChildren()) do
				Results.CanvasSize = UDim2.new(0,0,0,0)
				if v.ClassName == "ImageLabel" then
					v:Destroy()
				end
			end
							
							if SearchHalf == true then
								FindUpvalueHalf(UpvalueText.Text)
							elseif SearchPath == true then
								GetUpvalues(UpvalueText.Text)
							else
								FindUpvalue(UpvalueText.Text)
							end


						
						
												
												
										ChangeModuleValueTab.Visible = false
											
										TextBox.Text = val
							ChangeModuleValueTab.Visible = false
							
									else
										MessageBoxInitUI("Integar is not a number!")
										return
									end
									
								elseif ElementText.Text == "string" == true then
									
									if tonumber(TextBox.Text) then
										MessageBoxInitUI("Integar is not a string!")
										return
										else
							local val = TextBox.Text
							
		
						
											local oh_get_gc = getgc or false
local oh_is_x_closure = is_synapse_function or issentinelclosure or is_protosmasher_closure or is_sirhurt_closure or checkclosure or false
local oh_get_info = debug.getinfo or getinfo or false
local oh_set_upvalue = debug.setupvalue or setupvalue or setupval or false

if not oh_get_gc and not oh_is_x_closure and not oh_get_info and not oh_set_upvalue then
    warn("Your exploit does not support this script")
    return
end

local oh_find_function = function(name)
    for i,v in pairs(oh_get_gc()) do
        if type(v) == "function" and not oh_is_x_closure(v) then
            if oh_get_info(v).name == name then
                return v
            end
        end
    end
end

local upvalname = oh_find_function(ElementValueText.Text)
local oh_index = tonumber(int)  -- replace this with the index of the upvalue
local oh_new_value = tostring((TextBox.Text)) -- replace this with the value that you want to set the upvalue to

oh_set_upvalue(upvalname, oh_index, oh_new_value)
							
									for i,v in pairs(Results:GetChildren()) do
				Results.CanvasSize = UDim2.new(0,0,0,0)
				if v.ClassName == "ImageLabel" then
					v:Destroy()
				end
			end
							
							if SearchHalf == true then
								FindUpvalueHalf(UpvalueText.Text)
							elseif SearchPath == true then
								GetUpvalues(UpvalueText.Text)
							else
								FindUpvalue(UpvalueText.Text)
							end
										
										TextBox.Text = val
							ChangeModuleValueTab.Visible = false
							
								
										
								end
								
									
								elseif ElementText.Text == "boolean" == true then
									
									if TextBox.Text == "true" or TextBox.Text == "false" then
											local val = TextBox.Text
																						local oh_get_gc = getgc or false
local oh_is_x_closure = is_synapse_function or issentinelclosure or is_protosmasher_closure or is_sirhurt_closure or checkclosure or false
local oh_get_info = debug.getinfo or getinfo or false
local oh_set_upvalue = debug.setupvalue or setupvalue or setupval or false

if not oh_get_gc and not oh_is_x_closure and not oh_get_info and not oh_set_upvalue then
    warn("Your exploit does not support this script")
    return
end

local oh_find_function = function(name)
    for i,v in pairs(oh_get_gc()) do
        if type(v) == "function" and not oh_is_x_closure(v) then
            if oh_get_info(v).name == name then
                return v
            end
        end
    end
end

local upvalname = oh_find_function(ElementValueText.Text)
local oh_index = tonumber(int)  -- replace this with the index of the upvalue
local oh_new_value = tostring((TextBox.Text)) -- replace this with the value that you want to set the upvalue to

oh_set_upvalue(upvalname, oh_index, oh_new_value)
							
							
							
									for i,v in pairs(Results:GetChildren()) do
				Results.CanvasSize = UDim2.new(0,0,0,0)
				if v.ClassName == "ImageLabel" then
					v:Destroy()
				end
			end
							
							if SearchHalf == true then
								FindUpvalueHalf(UpvalueText.Text)
							elseif SearchPath == true then
								GetUpvalues(UpvalueText.Text)
							else
								FindUpvalue(UpvalueText.Text)
							end
							
							
										TextBox.Text = val
										ChangeModuleValueTab.Visible = false
									else
										MessageBoxInitUI("Integar is not a boolean!")
										return
									end
									
								end
								
								
								
								end
						
			
			
		
	
			
			
		end)
		
		
		
		
			

			
			


			
			


			
			
			
			
			ExplorerBtn.MouseButton1Click:connect(function()
				RightModule.Visible = false
				_G.ClvcoreExplorerUpvaluesAdd(index, lol, name)
			end)
							
			
			
							local plr = game.Players.LocalPlayer

local mouse = plr:GetMouse()

							
							RightModule.Visible = true
							RightModule.Position = UDim2.new(0, mouse.X, 0, mouse.Y)
							
							
						
						
						          end)
		
		
		
		
		
	end
	
	
	function FindUpvalue(Name)
    if type(Name) ~= 'string' then 
        return
    end

    for i, v in pairs(getgc()) do
        if getfenv(v).script ~= nil and typeof(getfenv(v).script) == 'Instance' then
            if debug.getinfo(v).name == Name then
            
					for i2,v2 in pairs(debug.getupvalues(v)) do
					
				
					
					
						UpvalueOutput(i2, Name, v2)
						
					end
					
					
					
            end
        end
    end
	end
	
	function FindUpvalueHalf(Name)
    if type(Name) ~= 'string' then 
        return
    end

    for i, v in pairs(getgc()) do
        if getfenv(v).script ~= nil and typeof(getfenv(v).script) == 'Instance' then
            local InfoName = debug.getinfo(v).name
            if InfoName:lower():find(Name) then
               local klol = debug.getupvalues(v)
					
					
					for i2,v2 in pairs(debug.getupvalues(v)) do
		
					
					
						UpvalueOutput(i2, InfoName, v2)
						
					end
            end
        end
    end
	end
	
	
	
	function GetUpvalues(Script)
    if type(Script) ~= 'Instance' then
        return
    end

    for i, v in pairs(getgc()) do
        wait()
        if getfenv(v).script ~= nil and typeof(getfenv(v).script) == 'Instance' and getfenv(v).script == Script then
             local klol = debug.getupvalues(v)
					
					
					for i2,v2 in pairs(debug.getupvalues(v)) do
					
				
					
					
						UpvalueOutput(i2, Script, v2)
						
					end
        end
    end
end
	
	
	UpvalueText.FocusLost:connect(function(enter)
		if enter then
			
			numb = string.len(UpvalueText.Text)
			if numb == 1 or numb == 0 then
				MessageBoxInitUI("your query is too short")
				return
			end
			
			
			
			
			for i,v in pairs(Results:GetChildren()) do
				Results.CanvasSize = UDim2.new(0,0,0,0)
				if v.ClassName == "ImageLabel" then
					v:Destroy()
				end
			end
			if SearchHalf == true then
				FindUpvalueHalf(UpvalueText.Text)
			end
			
			
			if SearchPath == true then
				GetUpvalues(UpvalueText.Text)
			end
			
			
			if SearchHalf == false and SearchPath == false then
		
			FindUpvalue(UpvalueText.Text)
			end
		end
	end)
	
	
end
UpvalueScanner()
