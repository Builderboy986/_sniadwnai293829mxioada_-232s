function ValueExplorer()
	for i,v in pairs(game.Players.LocalPlayer:GetDescendants()) do
		if v.ClassName == "BoolValue" then
		
			
			
			
local ValueInfo = Instance.new("Frame", ValueContainer)
local Valueicon_xd = Instance.new("ImageLabel")
local ValName = Instance.new("TextLabel")
local ValueInfoBtn = Instance.new("TextButton")
local ValValue = Instance.new("TextLabel")

--Properties:

ValueInfo.Name = "ValueInfo"
ValueInfo.BackgroundColor3 = Color3.fromRGB(58, 58, 58)
ValueInfo.BorderSizePixel = 0
ValueInfo.Size = UDim2.new(0, 395, 0, 36)

Valueicon_xd.Name = "Valueicon_xd"
Valueicon_xd.Parent = ValueInfo
Valueicon_xd.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Valueicon_xd.BackgroundTransparency = 1.000
Valueicon_xd.Size = UDim2.new(0, 36, 0, 36)
Valueicon_xd.Image = "rbxassetid://2717878542"

ValName.Name = "ValName"
ValName.Parent = ValueInfo
ValName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ValName.BackgroundTransparency = 1.000
ValName.Position = UDim2.new(0.106329113, 0, 0, 0)
ValName.Size = UDim2.new(0, 279, 0, 36)
ValName.Font = Enum.Font.SourceSans
ValName.Text = v.Name
ValName.TextColor3 = Color3.fromRGB(255, 255, 255)
ValName.TextSize = 18.000
ValName.TextXAlignment = Enum.TextXAlignment.Left

ValueInfoBtn.Name = "ValueInfoBtn"
ValueInfoBtn.Parent = ValueInfo
ValueInfoBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ValueInfoBtn.BackgroundTransparency = 1.000
ValueInfoBtn.Size = UDim2.new(0, 395, 0, 36)
			ValueInfoBtn.Visible = true
			ValueInfoBtn.Text = ""
ValueInfoBtn.Font = Enum.Font.SourceSans
ValueInfoBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
ValueInfoBtn.TextSize = 14.000

ValValue.Name = "ValValue"
ValValue.Parent = ValueInfo
ValValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ValValue.BackgroundTransparency = 1.000
ValValue.Position = UDim2.new(0.865822792, 0, 0, 0)
ValValue.Size = UDim2.new(0, 47, 0, 36)
ValValue.Font = Enum.Font.SourceSans
ValValue.Text = tostring(v.Value)
ValValue.TextColor3 = Color3.fromRGB(255, 255, 255)
			ValValue.TextSize = 18.000
			ValueContainer.CanvasSize = ValueContainer.CanvasSize + UDim2.new(0,0,0.2,0)
			ValValue.TextXAlignment = Enum.TextXAlignment.Left
			
		
			
			
			
			
			
			
			
			ValueInfoBtn.MouseButton2Click:connect(function()
				
					
				
				Value = ValValue.Text
				ValueName = ValName.Text
				--print(Value)
				--print(ValueName)
				
				
				RightModule.Visible = true
				
				
				
				
				
				local plr = game.Players.LocalPlayer

local mouse = plr:GetMouse()

							
							RightModule.Visible = true
							RightModule.Position = UDim2.new(0, mouse.X, 0, mouse.Y)
							
							
						
						
						          end)
						
						

					
          -- change table element for modules

						
						
						
						
						 ExplorerBtn.MouseButton1Click:connect(function()
							RightModule.Visible = false
							_G.ClvcoreExplorerAdd(ValueName, Value)
							return
							
						end)
						
						
						MaeScriptBtn.MouseButton1Click:connect(function()
				RightModule.Visible = false
				for f,u in pairs(game.Players.LocalPlayer:GetDescendants()) do
					if u.ClassName == "BoolValue" then
					if u.Name == ValueName then
							
							setclipboard("-- This script was generated with clvcore\n\noh_path = game." .. u:GetFullName() .. "\n\noh_old_value = " .. Value .. "\n\noh_new_value = ReplaceThisWithWhatYouWant\n\noh_path.Value = oh_new_value")
							
						end
						end
					end
					
						end)
						
						
						
						ChangeValueBtn.MouseButton1Click:connect(function()
							
							RightModule.Visible = false
								
							

          ChangeModuleValueTab.Visible = true
          TextBox.Text = Value
          ElementValueText.Text = ValueName

          if tonumber(TextBox.Text) then
            ElementText.Text = "number"
          elseif TextBox.Text == "false" or TextBox.Text == "true" then
            ElementText.Text = "boolean"
          else
            ElementText.Text = "string"
          end

          end)

          local numberDropDown = false
          local stringDropDown = false
          local booleanDropDown  = false

          if ElementText.Text == "number" then

            numberDropDown = true
            booleanDropDown = false
            stringDropDown = false
          elseif ElementText.Text == "boolean" then

            numberDropDown = false
            stringDropDown = false
            booleanDropDown = true
          else

            stringDropDown = true
            numberDropDown = false
            booleanDropDown  = false
          end

          DropDownBtn.MouseButton1Click:connect(function()
          DropDownOptions.Visible = true
          end)



          NumberElementBtn.MouseButton1Click:connect(function()
          numberDropDown = true
          booleanDropDown = false
          stringDropDown = false
          ElementText.Text = "number"
          DropDownOptions.Visible = false
          end)

          StringElementBtn.MouseButton1Click:connect(function()
          numberDropDown = false
          booleanDropDown = false
          stringDropDown = true
          ElementText.Text = "string"
          DropDownOptions.Visible = false
          end)

          BooleanElementBtn.MouseButton1Click:connect(function()
          numberDropDown = false
          booleanDropDown = true
          stringDropDown = false
          ElementText.Text = "boolean"
							          DropDownOptions.Visible = false
							
						end)
						
						
						
						

         TextBox.FocusLost:connect(function(enter) -- editing part
							if enter then
								
								
								if ElementText.Text == "number" == true then
									
									if tonumber(TextBox.Text) then
												local val = TextBox.Text
												
											--	pcall(function() loadstring(tostring("game." .. v:GetFullName() .. ".Value = " .. TextBox2.Text))() end);
												
												
										ChangeModuleValueTab.Visible = false
							local val = TextBox.Text
							for o,m in pairs(game:GetDescendants()) do
								if m.ClassName == "BoolValue" then
									if m.Name == ValueName then
										pcall(function() loadstring(tostring(m.Value .. " = " ..  TextBox.Text))() end);
									end
								end
							end
										
										ChangeModuleValueTab.Visible = false
										for i,v in pairs(ValueTab:GetDescendants()) do
											if v.Name == "ValName" then
												if v.Text == ElementValueText.Text then
													v.Parent.ValValue.Text = TextBox.Text
												end
											end
										end
										TextBox.Text = val
							ChangeModuleValueTab.Visible = false
							
									else
										MessageBoxInitUI("Integar is not a number!")
										return
									end
									
								elseif ElementText.Text == "string" == true then
									
									if tonumber(TextBox.Text) then
										MessageBoxInitUI("Integar is not a string!")
										return
						else
							
													local val = TextBox.Text
							for o,m in pairs(game:GetDescendants()) do
								if m.ClassName == "BoolValue" then
									if m.Name == ValueName then
										pcall(function() loadstring(tostring(m.Value .. " = " ..  TextBox.Text))() end);
									end
								end
							end
										ChangeModuleValueTab.Visible = false
										for i,v in pairs(ValueTab:GetDescendants()) do
											if v.Name == "ValName" then
												if v.Text == ElementValueText.Text then
													v.Parent.ValValue.Text = TextBox.Text
												end
											end
										end
										TextBox.Text = val
							ChangeModuleValueTab.Visible = false
							
								
										
								end
								
									
								elseif ElementText.Text == "boolean" == true then
									
									if TextBox.Text == "true" or TextBox.Text == "false" then
										local val = TextBox.Text
							for o,m in pairs(game:GetDescendants()) do
								if m.ClassName == "BoolValue" then
									if m.Name == ValueName then
										pcall(function() loadstring(tostring(m.Value .. " = " ..  TextBox.Text))() end);
									end
								end
							end
										ChangeModuleValueTab.Visible = false
										for i,v in pairs(ValueTab:GetDescendants()) do
											if v.Name == "ValName" then
												if v.Text == ElementValueText.Text then
													v.Parent.ValValue.Text = TextBox.Text
												end
											end
										end
										TextBox.Text = val
										ChangeModuleValueTab.Visible = false
									else
										MessageBoxInitUI("Integar is not a boolean!")
										return
									end
									
								end
								
								
								
								end
						end)
			
			
			
		end
	end
end
